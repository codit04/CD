#1) koch snowflake
'''
import turtle

def koch_snowflake(t,length,levels):
    if levels == 0:
        t.forward(length)
        return
    else:
        length = length/3

        koch_snowflake(t, length, levels-1)
        t.left(60)
        koch_snowflake(t, length, levels-1)

        t.right(120)
        koch_snowflake(t, length, levels-1)

        t.left(60)
        koch_snowflake(t, length, levels-1)





t = turtle.Turtle()
t.hideturtle()
t.color('black')

for i in range(3):
    koch_snowflake(t, 200, 4)
    t.right(120)


t.mainloop()
'''

#--------------------------------------------------------------

#2) tree

'''
import turtle

MINIMUM_LENGTH = 5

def build_tree(t,angle,length,shorten_by):
    if length > MINIMUM_LENGTH:
        t.forward(length)
        nlength = length - shorten_by
        t.left(angle)
        build_tree(t, angle, nlength, shorten_by)

        t.right(angle*2)
        build_tree(t, angle, nlength, shorten_by)

        t.left(angle)
        t.backward(length)
    return


tree = turtle.Turtle()
tree.hideturtle()
tree.setheading(90)
tree.color('green')

build_tree(tree, 30,50, 5)
turtle.mainloop()

'''

#--------------------------------------------------------------
# 3) sierprinsky triangle

'''
import turtle

w,h = 600,400

screen = turtle.Screen()
screen.setup(w,h)
screen.screensize(4*w,4*h)
screen.bgcolor('yellow')
turtle.speed(10)

l = turtle.Turtle()
l.speed(5)
l.setpos(-w//3,-h//3)
l.color('green')

#l-system
gens = 3
axiom = 'F'
chr1, rule_1 = 'F', 'F-G+F+G-F'
chr2, rule_2 = 'G', 'GG'
step = 8
angle = 120

def apply(axiom):
    return ''.join([rule_1 if chr==chr1 else rule_2 if chr==chr2 else chr
                    for chr in axiom])

def get_result(gens,axiom):
    for gen in range(gens):
        axiom = apply(axiom)
    return axiom

for gen in range(gens):
    turtle.pencolor('white')
    turtle.goto(-w// 2 + 60,h // 2 - 100)
    turtle.clear()
    turtle.write(f'generation: {gen}', align="left", font=("Arial", 60, "normal"))

    axiom = get_result(gens,axiom)
    for chr in axiom:
        if chr == chr1 or chr == chr2:
            l.forward(step)
        elif chr == '+':
            l.right(angle)
        elif chr == '-':
            l.left(angle)

    axiom = apply(axiom)

screen.exitonclick()
'''

#---------------------------------------------------------------
# 4) sierprinsky
'''
import turtle

def B(toy,length,levels):
    if levels==0:
        toy.forward(length)
        return
    A(toy,length,levels-1)
    toy.left(60)
    B(toy,length,levels-1)
    toy.left(60)
    A(toy,length,levels-1)





def A(toy,length,levels):
    if levels == 0:
        toy.forward(length)
        return
    B(toy,length,levels-1)
    toy.right(60)
    A(toy,length,levels-1)
    toy.right(60)
    B(toy,length,levels-1)





screen = turtle.Screen()
screen.bgcolor('black')
toy = turtle.Turtle()
toy.speed(0)
toy.color('green')
#toy.forward(100)
A(toy,5,10)
turtle.done()
turtle.exitonclick()
'''
